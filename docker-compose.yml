version: '3.7'
services:

  cartapi:
    container_name: cartapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/cartapi
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/cartapi/src/main/resources/application.properties:/tmp/src/cartapi/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8180:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  messageapi:
    container_name: messageapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/messageapi
    env_file:
      - .env.docker
    environment:
      - SPRING_MAIL_HOST=mailhog
      - SPRING_MAIL_PORT=1025
      - SPRING_MAIL_USERNAME=""
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=false
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=false
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/cartapi/src/main/resources/application.properties:/tmp/src/cartapi/src/main/resources/application.properties"
    ports:
      - '8181:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  mockproductmanagement:
    container_name: mockproductmanagement
    build:
      context: .
      args:
        - API_DIR=/tmp/src/mockproductmanagement
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/mockproductmanagement/src/main/resources/application.properties:/tmp/src/mockproductmanagement/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8182:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  orderapi:
    container_name: orderapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/orderapi
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/orderapi/src/main/resources/application.properties:/tmp/src/orderapi/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8183:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  paymentapi:
    container_name: paymentapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/paymentapi
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/paymentapi/src/main/resources/application.properties:/tmp/src/paymentapi/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8184:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  priceapi:
    container_name: priceapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/priceapi
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/priceapi/src/main/resources/application.properties:/tmp/src/priceapi/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8185:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  productapi:
    container_name: productapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/productapi
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/productapi/src/main/resources/application.properties:/tmp/src/productapi/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8186:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  productmapping:
    container_name: productmapping
    build:
      context: .
      args:
        - API_DIR=/tmp/src/productmapping
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/productmapping/src/main/resources/application.properties:/tmp/src/productmapping/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8187:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  eventsapi:
    container_name: eventsapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/eventsapi
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/eventsapi/src/main/resources/application.properties:/tmp/src/eventsapi/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8188:8080'
    networks:
      - common
    depends_on:
      - elasticsearch
      - kafka

  historyapi:
    container_name: historyapi
    build:
      context: .
      args:
        - API_DIR=/tmp/src/historyapi
    volumes:
      - "${HOME}/.m2:/root/.m2"
      - "./infra/historyapi/src/main/resources/application.properties:/tmp/src/historyapi/src/main/resources/application.properties"
    env_file:
      - .env.docker
    ports:
      - '8189:8080'
    networks:
      - common
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xmx2g -Xms2g"
      - discovery.type=single-node
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 3
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_reservation: 2048MB
    networks:
      - common

#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.12.1
#    container_name: kibana
#    environment:
#      - ELASTICSEARCH_URL=elasticsearch:9200
#    ports:
#      - "5601:5601"
#    networks:
#      - common

  zookeeper:
    container_name: zookeeper
    image: quay.io/strimzi/kafka:0.25.0-kafka-2.8.0
    command: [
        "sh", "-c",
        "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - common

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - common

  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - '1025:1025' # smtp server
      - '8025:8025' # web ui
    networks:
      - common

  activemq:
    image: webcenter/activemq:5.14.3
    ports:
      # mqtt
      - "1883:1883"
      # amqp
      - "5672:5672"
      # ui
      - "8161:8161"
      # stomp
      - "61613:61613"
      # ws
      - "61614:61614"
      # jms
      - "61616:61616"
    networks: [common]
    volumes: [ "activemq-data:/opt/activemq/conf", "activemq-data:/data/activemq", "activemq-data:/var/log/activemq" ]
    environment:
      ACTIVEMQ_REMOVE_DEFAULT_ACCOUNT: "true"
      ACTIVEMQ_ADMIN_LOGIN: admin
      ACTIVEMQ_ADMIN_PASSWORD: password
      ACTIVEMQ_WRITE_LOGIN: write
      ACTIVEMQ_WRITE_PASSWORD: password
      ACTIVEMQ_READ_LOGIN: read
      ACTIVEMQ_READ_PASSWORD: password
      ACTIVEMQ_JMX_LOGIN: jmx
      ACTIVEMQ_JMX_PASSWORD: password
      ACTIVEMQ_STATIC_TOPICS: static-topic-1
      ACTIVEMQ_STATIC_QUEUES: subscription-renewals;order-notifications;subscription-notifications;demo-single-msg-queue;DLQ;payment-failed-to-process
      ACTIVEMQ_ENABLED_SCHEDULER: "true"
      ACTIVEMQ_MIN_MEMORY: 512
      ACTIVEMQ_MAX_MEMORY: 2048

volumes:
  esdata1:
    driver: local
  activemq-data: {}
networks:
  common: