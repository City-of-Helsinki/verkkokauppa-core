version: '3.7'
services:

  cartapi:
    container_name: cartapi
    build:
      context: ./cartapi
      args:
        - API_DIR=/tmp/src/cartapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/cartapi/src/main/resources/application.properties:/app/cartapi/src/main/resources/application.properties"
    working_dir: /app
    command: "sh ./cartapi/run.sh"
    ports:
      - "8180:8080"
      - "35730:35729"
      - "5000:5005"
    environment:
      - API_DIR=cartapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch

  eventsapi:
    container_name: eventsapi
    build:
      context: ./eventsapi
      args:
        - API_DIR=/tmp/src/eventsapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/eventsapi/src/main/resources/application.properties:/app/eventsapi/src/main/resources/application.properties"
      - "./infra/eventsapi/src/main/resources/application-local.properties:/app/eventsapi/src/main/resources/application-local.properties"
      - "./infra/eventsapi/src/main/resources/email/template_email_notification.html:/app/eventsapi/src/main/resources/email/template_email_notification.html"
    working_dir: /app
    command: "sh ./eventsapi/run.sh"
    ports:
      - "8181:8080"
      - "35731:35729"
      - "5001:5005"
    environment:
      - API_DIR=eventsapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch
      - activemq
      - kafka

  historyapi:
    container_name: historyapi
    build:
      context: ./historyapi
      args:
        - API_DIR=/tmp/src/historyapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/historyapi/src/main/resources/application.properties:/app/historyapi/src/main/resources/application.properties"
    working_dir: /app
    command: "sh ./historyapi/run.sh"
    ports:
      - "8182:8080"
      - "35732:35729"
      - "5002:5005"
    environment:
      - API_DIR=historyapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch

  merchantapi:
    container_name: merchantapi
    build:
      context: ./merchantapi
      args:
        - API_DIR=/tmp/src/merchantapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/merchantapi/src/main/resources/application.properties:/app/merchantapi/src/main/resources/application.properties"
    working_dir: /app
    command: "sh ./merchantapi/run.sh"
    ports:
      - "8183:8080"
      - "35733:35729"
      - "5003:5005"
    environment:
      - API_DIR=merchantapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch

  messageapi:
    container_name: messageapi
    build:
      context: ./messageapi
      args:
        - API_DIR=/tmp/src/messageapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/messageapi/src/main/resources/application.properties:/app/messageapi/src/main/resources/application.properties"
    working_dir: /app
    command: "sh ./messageapi/run.sh"
    ports:
      - "8184:8080"
      - "35734:35729"
      - "5004:5005"
    env_file:
      - .env.docker
    environment:
      - API_DIR=messageapi
      - SPRING_MAIL_HOST=mailhog
      - SPRING_MAIL_PORT=1025
      - SPRING_MAIL_USERNAME=""
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=false
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=false
    networks:
      - common
    depends_on:
      - elasticsearch

  mockproductmanagement:
    container_name: mockproductmanagement
    build:
      context: ./mockproductmanagement
      args:
        - API_DIR=/tmp/src/mockproductmanagement
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/mockproductmanagement/src/main/resources/application.properties:/app/mockproductmanagement/src/main/resources/application.properties"
    working_dir: /app
    command: "sh ./mockproductmanagement/run.sh"
    ports:
      - "8185:8080"
      - "35735:35729"
      - "5005:5005"
    environment:
      - API_DIR=mockproductmanagement
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch

  orderapi:
    container_name: orderapi
    build:
      context: ./orderapi
      args:
        - API_DIR=/tmp/src/orderapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/orderapi/src/main/resources/application.properties:/app/orderapi/src/main/resources/application.properties"
      - "./infra/orderapi/src/main/resources/application-local.properties:/app/orderapi/src/main/resources/application-local.properties"
      - "./infra/orderapi/src/main/resources/email/template_email_dlq_alert.html:/app/orderapi/src/main/resources/email/template_email_dlq_alert.html"
    working_dir: /app
    command: "sh ./orderapi/run.sh"
    ports:
      - "8186:8080"
      - "35736:35729"
      - "5006:5005"
    environment:
      - API_DIR=orderapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch
      - activemq
      - kafka

  paymentapi:
    container_name: paymentapi
    build:
      context: ./paymentapi
      args:
        - API_DIR=/tmp/src/paymentapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/paymentapi/src/main/resources/application.properties:/app/paymentapi/src/main/resources/application.properties"
      - "./infra/paymentapi/src/main/resources/application-local.properties:/app/paymentapi/src/main/resources/application-local.properties"
    working_dir: /app
    command: "sh ./paymentapi/run.sh"
    ports:
      - "8187:8080"
      - "35737:35729"
      - "5007:5005"
    environment:
      - API_DIR=paymentapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch
      - activemq
      - kafka

  priceapi:
    container_name: priceapi
    build:
      context: ./priceapi
      args:
        - API_DIR=/tmp/src/priceapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/priceapi/src/main/resources/application.properties:/app/priceapi/src/main/resources/application.properties"
      - "./infra/priceapi/src/main/resources/application-local.properties:/app/priceapi/src/main/resources/application-local.properties"
    working_dir: /app
    command: "sh ./priceapi/run.sh"
    ports:
      - "8188:8080"
      - "35738:35729"
      - "5008:5005"
    environment:
      - API_DIR=priceapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch

  productapi:
    container_name: productapi
    build:
      context: ./productapi
      args:
        - API_DIR=/tmp/src/productapi
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/productapi/src/main/resources/application.properties:/app/productapi/src/main/resources/application.properties"
    working_dir: /app
    command: "sh ./productapi/run.sh"
    ports:
      - "8189:8080"
      - "35739:35729"
      - "5009:5005"
    environment:
      - API_DIR=productapi
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch

  productmapping:
    container_name: productmapping
    build:
      context: ./productmapping
      args:
        - API_DIR=/tmp/src/productmapping
    volumes:
      - ./:/app
      - "${HOME}/.m2:/root/.m2"
      - "./infra/productmapping/src/main/resources/application.properties:/app/productmapping/src/main/resources/application.properties"
    working_dir: /app
    command: "sh ./productmapping/run.sh"
    ports:
      - "8190:8080"
      - "35740:35729"
      - "5010:5005"
    environment:
      - API_DIR=productmapping
    env_file:
      - .env.docker
    networks:
      - common
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xmx2g -Xms2g"
      - discovery.type=single-node
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 3
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_reservation: 2048MB
    networks:
      - common

  zookeeper:
    container_name: zookeeper
    image: quay.io/strimzi/kafka:0.25.0-kafka-2.8.0
    command: [
        "sh", "-c",
        "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - common

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: on-failure
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ENABLE_KRAFT: "false"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - common

  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - '1025:1025' # smtp server
      - '8025:8025' # web ui
    networks:
      - common

  activemq:
    image: webcenter/activemq:5.14.3
    ports:
      # mqtt
      - "1883:1883"
      # amqp
      - "5672:5672"
      # ui
      - "8161:8161"
      # stomp
      - "61613:61613"
      # ws
      - "61614:61614"
      # jms
      - "61616:61616"
    networks: [common]
    volumes: [ "activemq-data:/opt/activemq/conf", "activemq-data:/data/activemq", "activemq-data:/var/log/activemq" ]
    environment:
      ACTIVEMQ_REMOVE_DEFAULT_ACCOUNT: "true"
      ACTIVEMQ_ADMIN_LOGIN: admin
      ACTIVEMQ_ADMIN_PASSWORD: password
      ACTIVEMQ_WRITE_LOGIN: write
      ACTIVEMQ_WRITE_PASSWORD: password
      ACTIVEMQ_READ_LOGIN: read
      ACTIVEMQ_READ_PASSWORD: password
      ACTIVEMQ_JMX_LOGIN: jmx
      ACTIVEMQ_JMX_PASSWORD: password
      ACTIVEMQ_STATIC_TOPICS: static-topic-1
      ACTIVEMQ_STATIC_QUEUES: subscription-renewals;order-notifications;subscription-notifications;demo-single-msg-queue;DLQ;payment-failed-to-process;refund-notifications;refund-failed-to-process;error-email-notifications;error-email-notifications-sent
      ACTIVEMQ_ENABLED_SCHEDULER: "true"
      ACTIVEMQ_MIN_MEMORY: 512
      ACTIVEMQ_MAX_MEMORY: 2048

  sftp:
    image: atmoz/sftp
    volumes:
      - "./mockedSap/share:/home/sftp/share"
      - "./infra/mockedSap/init.sh:/etc/sftp.d/init.sh:ro"
    ports:
      - "2222:22"
    networks: [common]
    command: sftp:password:::share

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    volumes:
      - ./infra/kafka-ui/config.yml:/etc/kafkaui/dynamic_config.yaml
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks: [common]
    ports:
      - '8026:8080'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8080 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  esdata1:
    driver: local
  activemq-data: {}
networks:
  common: